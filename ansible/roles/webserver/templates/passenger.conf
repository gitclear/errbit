##
# Phusion Passenger config
##

passenger_root /usr/lib/ruby/vendor_ruby/phusion_passenger/locations.ini;
passenger_ruby /usr/bin/passenger_free_ruby;

passenger_default_user {{ user }};

# Disabling telemetry
passenger_disable_anonymous_telemetry on;

# Don't limit request queue size (we easily hit the default limit of 100 queued requests when restarting on a high
# volume app server))
#   https://www.phusionpassenger.com/library/config/nginx/reference/#passenger_max_request_queue_size
passenger_max_request_queue_size 0;

# On the off-chance that we don't get a request for a while, don't let passenger terminate the spawner or worker
# processes for being idle (0 means "disabled")
#   https://www.phusionpassenger.com/library/config/nginx/reference/#passenger_max_preloader_idle_time
#   https://www.phusionpassenger.com/library/config/nginx/reference/#passenger_pool_idle_time
passenger_max_preloader_idle_time 0;
passenger_pool_idle_time 0;

# This will make passenger shut a worker down after it has processed N requests, on the off-chance that it has been
# leaking memory and is getting too large
#   https://www.phusionpassenger.com/library/config/nginx/reference/#passenger_max_requests
passenger_max_requests 500;

{% if staging is not defined %}
# Passenger will shutdown any worker that goes over this amount of memory usage (after it finishes handling the
# current request).
#   https://www.phusionpassenger.com/library/config/nginx/reference/#passenger_memory_limit
passenger_memory_limit 4000;
{% endif %}

passenger_friendly_error_pages off;

{% if staging is not defined %}
  passenger_rolling_restarts on;
  passenger_resist_deployment_errors on;
{% endif %}

# Send X-Request-Start header to passenger
passenger_set_header X-REQUEST-START "t=${msec}";

# Split out the passenger log (includes STDOUT for the application) from the nginx error log
passenger_log_file /var/log/nginx/passenger.log;

# This is the default log level (3), repeated here for easy adjustment
passenger_log_level 3;

# Average Passenger process takes around 600m before it starts growing bloated with additional requests. Since
# each server has 128gb, and each runs processes besides Passenger, a limit of 30 processes per server ought to
# reliably keep us below 120GB, since passenger will kill any processes that grow to 4GB.
passenger_max_pool_size 30;
